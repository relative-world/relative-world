import logging
import random
import time

from relative_world.actor import Actor
from relative_world.event import Event
from relative_world.location import Location
from relative_world.time import utcnow
from relative_world.world import RelativeWorld

# Configure logging
logging.basicConfig(
    level=logging.WARN, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class NewsEvent(Event):
    """
    Event that represents a news headline and content.

    Attributes:
        type (str): The type of the event, set to "NEWS".
        headline (str): The headline of the news.
        content (str): The content of the news.
    """

    type: str = "NEWS"
    headline: str
    content: str


class UnbiasedNewspaper(Actor):
    """
    An actor representing an unbiased newspaper.

    Attributes:
        name (str): The name of the newspaper.
    """

    name: str = "Unbiased Newspaper"

    def update(self):
        """
        Updates the state of the newspaper by generating a news event.

        Yields:
            Iterator[Event]: Events generated by the newspaper.
        """
        logging.debug(f"{self.name} ({self.id}) is updating.")
        headline_tag = random.choice(["Breaking", "Fake", "Real"])
        content = random.choice(["Everything is fine.", "Everything is not fine."])

        # Emit a news event with a random headline and content
        self.emit_event(NewsEvent(headline=f"{headline_tag} News", content=content))

        # Call the super method to flush the events
        yield from super().update()


class Reddit(Actor):
    """
    An actor representing Reddit.

    Attributes:
        name (str): The name of the actor.
    """

    name: str = "Reddit"

    def update(self):
        """
        Updates the state of Reddit by generating a news event.

        Yields:
            Iterator[Event]: Events generated by Reddit.
        """
        logging.debug(f"{self.name} ({self.id}) is updating.")
        reddit_headline = random.choice(
            [
                "Look at this cat",
                "Birds aren't real",
                "I lost all my money in the stock market",
                "I (F30) just discovered my husband (M53) is a literal serial killer, AITA for calling the police?",
            ]
        )
        reddit_content = "boop the snoot."

        # Yield a news event with a random headline and content
        yield from (
            (self, NewsEvent(headline=reddit_headline, content=reddit_content)),
        )


class TheMercury(Actor):
    """
    An actor representing The Mercury.

    Attributes:
        name (str): The name of the actor.
    """

    name: str = "The Mercury"

    def act(self):
        """
        Generates a news event.

        Yields:
            Iterator[Event]: Events generated by The Mercury.
        """
        logging.debug(f"{self.name} ({self.id}) is acting.")
        yield from (
            NewsEvent(headline="Anarchy in our time", content="Also it's slushy week."),
        )


class NewsReader(Actor):
    """
    An actor representing a news reader.

    Attributes:
        name (str): The name of the news reader.
    """

    name: str

    def handle_event(self, entity, event):
        """
        Handles a news event by logging and printing the event details.

        Args:
            entity (Entity): The entity that generated the event.
            event (Event): The event to handle.
        """
        if isinstance(event, NewsEvent):
            logging.debug(
                f"{self.name} ({self.id}) is handling event: {event.headline} - {event.content}"
            )
            print(f"{self.name} - {event.headline} - {event.content}")


def main():
    """
    Main function to set up the world, locations, actors, and run the simulation.
    """
    # Create the world
    world = RelativeWorld(name="World", simulation_start_time=utcnow())
    logging.debug("Created RelativeWorld")

    # Create locations
    oregon = Location(name="Oregon")
    new_york = Location(name="New York", private=False)
    san_francisco = Location(name="San Francisco", private=False)
    logging.debug("Created locations: Oregon, New York, San Francisco")

    # Add locations to the world
    world.add_location(oregon)
    world.add_location(san_francisco)
    world.add_location(new_york)
    logging.debug("Added locations to the world")

    # Create news sources
    unbiased_newspaper = UnbiasedNewspaper()
    reddit = Reddit()
    the_mercury = TheMercury()
    logging.debug("Created news sources: Unbiased Newspaper, Reddit, The Mercury")

    # Add news sources to locations
    world.add_actor(unbiased_newspaper, location=new_york)
    world.add_actor(reddit, location=san_francisco)
    world.add_actor(the_mercury, location=oregon)
    logging.debug("Added news sources to locations")

    # Create someone to read the news
    informed_citizen = NewsReader(name="Informed Citizen")
    world.add_actor(informed_citizen, location=new_york)  # they won't see the news from Oregon because it doesn't propagate
    logging.debug("Added Informed Citizen to New York")

    # Run the simulation
    while True:
        logging.debug("Updating world")
        list(world.update())
        time.sleep(1)


if __name__ == "__main__":
    main()
